<?php
/**
 * @file
 * Code for the RedHen Features feature.
 */

include_once('redhen_features.features.inc');

/**
 * Implements hook_block_info().
 */
function redhen_features_block_info() {
  $blocks['redhen_info'] = array(
    'info' => t('Origin of RedHen CRM'), 
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  $blocks['redhen_logo'] = array(
    'info' => t('RedHen CRM logo'), 
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  $blocks['redhen_home'] = array(
    'info' => t('RedHen Homepage Info'), 
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  $blocks['redhen_listings'] = array(
    'info' => t('RedHen Info on EFQ-based listings'), 
    'cache' => DRUPAL_CACHE_GLOBAL,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function redhen_features_block_view($delta = '') {
  
  $rh_logo = '/' . drupal_get_path('module', 'redhen') . '/misc/redhen_logo_small.png';
  $ts_logo = '/' . drupal_get_path('module', 'redhen') . '/misc/thinkshout_logo.png';
    
  $block = array();

  switch ($delta) {
    case 'redhen_info':
      $block['subject'] = t('');
      $block['content'] = '<h2><a href="http://redhencrm.com">RedHen CRM</a> is brought to you by <a href="http://thinkshout.com">ThinkShout</a>.</h2><p>We help progressive organizations achieve their goals by leveraging open source technologies. Our motivation comes from knowing our clients make the world a better place.</p>';
      break;

    case 'redhen_logo':
      $block['subject'] = t('');
      $block['content'] = '<div><a href="http://thinkshout.com"><img src="' . $ts_logo . '" /></a><a href="http://redhencrm.com"><img src="' . $rh_logo . '" /></a></div>';
      break;

      case 'redhen_home':
        $block['subject'] = t('');
        $block['content'] = '<p>In this <b>RedHen CRM demonstration</b>, we show how the framework could be leveraged to build an association management system supporting a fictional organization: The National Association of Pet Shelters.</p><p>In this example, we have created two different types (or in <em>Drupal speak</em> "entity bundles") of individual contact records - one for shelter staff and another for volunteers, each with its own unique set of fields. Similarly, we have created two different types of organization records - one for the shelters themselves and another for foundations that support the work of these organizations. We can then leverage RedHen to show the connections between these contact and organization records, as well as to manage both individual and organizational memberships within our fictional association.</p>';
        break;
      
        case 'redhen_listings':
          $block['subject'] = t('');
          $block['content'] = '<p>The filterable list below leverages the new <b>Entity Field Query</b> (EFQ) approach in Drupal 7 rather than the Views module. <em>In fact, the core RedHen CRM feature set does not depend on Views at all.</em> Of course, RedHen supports Views and Rules integration through its reliance on the Entity API - and you can extend your own instance of RedHen with Views and Rules quite easily.</p><p>Why doesn\'t RedHen rely on Views? Well, for two very different reasons. First, for experienced Drupal developers looking to build complex add-ons to RedHen, we felt that Views-based interfaces were more difficult to extend programmatically than interfaces based on EFQ. Second, for non-developers, we\'ve found that the EFQ approach simplifies the process of extending RedHen. For an example of this, check out the filter form below. When Drupal fields are added to a RedHen entity bundle through the Fields UI, they are automatically exposed as filter options our listing pages.</p>';
          break;
    
    }
      
  return $block;
}